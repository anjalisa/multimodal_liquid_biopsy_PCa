/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

//
// Read QC , extract UMI and trimming options
//

if (!params.skip_fastx) {
    process {
            withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:FASTX_TRIMMER' {
                ext.prefix = { "${meta.id}" }
                ext.args   = "-l ${params.read_length} -Q 33 -z"
                publishDir = [
                    path: { "${params.preprocessing}/${params.runID}/fastx" },
                    mode: params.publish_dir_mode, 
                    pattern: "*.{fastq.gz}"
                ]
            }
    }
}

if (params.with_umi && !params.skip_umi_extract) {

    if (!params.skip_fastqc_raw) {
        process {
            withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:UMITOOLS_CUTADAPT:FASTQC_RAW' {
                publishDir = [
                    path: { "${params.preprocessing}/${params.runID}/QC/rawdata/fastqc" },
                    mode: params.publish_dir_mode, 
                    pattern: "*.{zip,html}"
                ]
            }
        }
    }

    process {
        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:UMITOOLS_CUTADAPT:UMITOOLS_EXTRACT' {
            ext.args   = [
                    params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                    params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : ''
                ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.preprocessing}/${params.runID}/umitools/metrics" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log",
                    enabled: params.save_umi
                ],
                [
                    path: { "${params.preprocessing}/${params.runID}/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*_{R1,R2}.fastq.gz",
                    enabled: params.save_umi
                ]
            ]
        }
    }

    if (!params.skip_trimming) { 
        process {
            withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:UMITOOLS_CUTADAPT:CUTADAPT' {
                ext.args  = [params.adapter_forward ? "-a ${params.adapter_forward}" : '',
                            params.adapter_reverse ? "-A ${params.adapter_reverse}" : '',
                            "--trim-n --overlap 1 --times 2 -e 0.1",
                            params.nextseq_trim ? "--nextseq-trim=${params.nextseq_trim}" : ''].join(' ').trim()
                publishDir = [
                    [
                        path: { "${params.preprocessing}/${params.runID}/trimming_cutadapt" },
                        mode: params.publish_dir_mode, 
                        pattern: "*.fastq.gz",
                        enabled: params.save_trimmed
                    ],
                    [
                        path: { "${params.preprocessing}/${params.runID}/trimming_cutadapt/metrics" },
                        mode: params.publish_dir_mode,
                        pattern: "*.{log, json}"
                    ]
                ]
            }
        }
        if (!params.skip_fastqc_trim) {
            process {
                withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:UMITOOLS_CUTADAPT:FASTQC_TRIM' {
                    publishDir = [
                    path: { "${params.preprocessing}/${params.runID}/QC/trimming/fastqc" },
                    mode: params.publish_dir_mode, 
                    pattern: "*.{zip,html}"
                    ]
                }
            }
        }
    }
}

if (params.skip_umi_extract || !params.with_umi) {
    if (!params.skip_fastqc_raw) {
        process {
            withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:TRIMMING_FASTQC:FASTQC_RAW' {
                publishDir = [
                    path: { "${params.preprocessing}/${params.runID}/QC/rawdata/fastqc" },
                    mode: params.publish_dir_mode, 
                    pattern: "*.{zip,html}"
                ]
            }
        }
    }
        
    if (!params.skip_trimming) {  
        process {
            withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:TRIMMING_FASTQC:CUTADAPT' {
                ext.args  = [params.adapter_forward ? "-a ${params.adapter_forward}" : '',
                            params.adapter_reverse ? "-A ${params.adapter_reverse}" : '',
                            "--trim-n --overlap 1 --times 2 -e 0.1",
                            params.nextseq_trim ? "--nextseq-trim=${params.nextseq_trim}" : ''].join(' ').trim()
                publishDir = [
                    [
                        path: { "${params.preprocessing}/${params.runID}/trimming_cutadapt" },
                        mode: params.publish_dir_mode, 
                        pattern: "*.fastq.gz",
                        enabled: params.save_trimmed
                        ],
                        [
                        path: { "${params.preprocessing}/${params.runID}/trimming_cutadapt/metrics" },
                        mode: params.publish_dir_mode,
                        pattern: "*.{log,json}"
                        ]
                    ]
                }
            }
        
        if (!params.skip_fastqc_trim) {
            process {
                withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:TRIMMING_FASTQC:FASTQC_TRIM' {
                    publishDir = [
                        path: { "${params.preprocessing}/${params.runID}/QC/trimming/fastqc" },
                        mode: params.publish_dir_mode, 
                        pattern: "*.{zip,html}"
                    ]
                }
            }
        }
    }
}

//
// Alignment, including coordinate-sorting and indexing (subworkflow ALIGNEMENT_BOWTIE2)
//

process {
    withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:ALIGNEMENT_BOWTIE:BOWTIE2_ALIGN' {
            ext.prefix = { "${meta.id}" }
            ext.args   = '--phred33 --minins 30 --maxins 700 --fr'
            publishDir = [
                [
                path: { "${params.preprocessing}/${params.runID}/mapping_bowtie2/unaligned" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz", 
                enabled: params.save_unaligned
                ],
                [
                path: { "${params.preprocessing}/${params.runID}/mapping_bowtie2/metrics" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
                ]
            ]
        }
    
    withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:ALIGNEMENT_BOWTIE:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.mapped.csort" }
            publishDir =[
                path: { "${params.preprocessing}/${params.runID}/mapping_bowtie2" },
                mode: params.publish_dir_mode,
                pattern: "*.bam"
            ]
        }
    
    withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:ALIGNEMENT_BOWTIE:SAMTOOLS_INDEX' {
            ext.args   = params.bam_csi_index ? '-c' : ''
            ext.prefix = { "${meta.id}.mapped.csort" }
            publishDir = [
                path: { "${params.preprocessing}/${params.runID}/mapping_bowtie2" },
                mode: params.publish_dir_mode,
                pattern: "*.{bai, csi}"   
            ]
        }
}

if (!params.skip_samtools_stats_bowtie2) {
    process {
        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:ALIGNEMENT_BOWTIE:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.preprocessing}/${params.runID}/QC/mapping/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}", 
                enabled: !params.skip_samtools_stats_bowtie2   
            ]
        }    
    }
}

if (!params.skip_fastqc_map) {
    process {
        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:ALIGNEMENT_BOWTIE:FASTQC_MAP' {
                publishDir = [
                path: { "${params.preprocessing}/${params.runID}/QC/mapping/fastqc" },
                mode: params.publish_dir_mode, 
                pattern: "*.{zip,html}"
            ]
        }
    }
}

//
// Quality filtering and indexing (subworkflow BAM_FILTER_SAMTOOLS)
//

if (!params.skip_filtering) {
    process {
        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:BAM_FILTER_SAMTOOLS:SAMTOOLS_VIEW_FILTER' {
            ext.args   = [ "-q ${params.mapq}", '-F 12', '-f 3', '-b' ].join(' ').trim()
            ext.prefix = { "${meta.id}.filter" }
            publishDir = [
                path: { "${params.preprocessing}/${params.runID}/filter_bam" },
                mode: params.publish_dir_mode,
                pattern: "*.bam"   
            ]
        }

        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:BAM_FILTER_SAMTOOLS:SAMTOOLS_INDEX' {
            ext.args   = params.bam_csi_index ? '-c' : ''
            ext.prefix = { "${meta.id}.filter" }
            publishDir = [
                path: { "${params.preprocessing}/${params.runID}/filter_bam" },
                mode: params.publish_dir_mode, 
                pattern: "*.{bai, csi}"   
            ]
        }
    }
}

//
// DEDUPLICATION
//
    // Deduplication with UMI (subworkflow DEDUP_UMI_UMITOOLS), indexing of sorted output
    //
    if (params.with_umi && params.skip_markduplicates) {
        process {
            withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:DEDUP_UMI_UMITOOLS:UMITOOLS_DEDUP' {
                ext.args = { meta.single_end ? '' : '--unpaired-reads=discard --chimeric-pairs=discard' }
                ext.prefix = { "${meta.id}.final" }
                publishDir = [
                    [
                        path: { "${params.preprocessing}/${params.runID}/dedup_umitools/umitools_stats" },
                        mode: params.publish_dir_mode,
                        pattern: '*.tsv',
                        enabled: params.with_umi
                    ],
                    [
                        path: { "${params.preprocessing}/${params.runID}/dedup_umitools" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam',
                        enabled: params.with_umi
                    ]
                ]
            }

            withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:DEDUP_UMI_UMITOOLS:SAMTOOLS_INDEX' {
                ext.args   = params.bam_csi_index ? '-c' : ''
                ext.prefix = { "${meta.id}.final" }
                publishDir = [
                    path: { "${params.preprocessing}/${params.runID}/dedup_umitools" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{bai,csi}'
                ]
            }
        }
            
        if (!params.skip_samtools_stats_dedup) { 
            process {    
                withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:DEDUP_UMI_UMITOOLS:BAM_STATS_SAMTOOLS:.*' {
                    ext.prefix = { "${meta.id}.final" }
                    publishDir = [
                        path: { "${params.preprocessing}/${params.runID}/QC/final_bam/samtools_stats" },
                        mode: params.publish_dir_mode,
                        pattern: '*.{stats,flagstat,idxstats}', 
                        enabled: !params.skip_samtools_stats_dedup
                    ]
                }
            }
        } 

        if (!params.skip_fastqc_final) {
            process {
                withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:DEDUP_UMI_UMITOOLS:FASTQC_FINAL' {
                    publishDir = [
                    path: { "${params.preprocessing}/${params.runID}/QC/final_bam/fastqc" },
                    mode: params.publish_dir_mode, 
                    pattern: "*.{zip,html}"
                    ]
                }
            }
        }   
    }

    // Deduplication with PICARD_MARKDUPLICATES (subworkflow MARK_DUPLICATES_PICARD), indexing of sorted output
    //
    if (!params.with_umi && !params.skip_markduplicates) {
        process {
            withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
                ext.args   = [params.remove_duplicates ? '--REMOVE_DUPLICATES true' : '--REMOVE_DUPLICATES false' , 
                                "--ASSUME_SORTED true"].join(' ').trim()
                ext.prefix = { "${meta.id}.final" }
                publishDir = [
                    [
                        path: { "${params.preprocessing}/${params.runID}/dedup_picard/picard_metrics" },
                        mode: params.publish_dir_mode,
                        pattern: '*.metrics.txt', 
                        enabled: (!params.skip_markduplicates)
                    ],
                    [
                        path: { "${params.preprocessing}/${params.runID}/dedup_picard" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam',
                        enabled: (!params.skip_markduplicates)
                    ]
                ]
            }

            withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:MARK_DUPLICATES_PICARD:SAMTOOLS_INDEX' {
                ext.args   = params.bam_csi_index ? '-c' : ''
                ext.prefix = { "${meta.id}.final" }
                publishDir = [
                    path: { "${params.preprocessing}/${params.runID}/dedup_picard" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{bai,csi}', 
                    enabled: (!params.skip_markduplicates)
                ]
            }
        }
            
        if (!params.skip_samtools_stats_dedup) {
            process {
                withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
                    ext.prefix = { "${meta.id}.final" }
                    publishDir = [
                        path: { "${params.preprocessing}/${params.runID}/QC/final_bam/samtools_stats" },
                        mode: params.publish_dir_mode,
                        pattern: '*.{stats,flagstat,idxstats}',
                        enabled: !params.skip_samtools_stats_dedup
                    ]
                }
            }
        }

        if (!params.skip_fastqc_final) {
            process {
                withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:MARK_DUPLICATES_PICARD:FASTQC_FINAL' {
                    publishDir = [
                    path: { "${params.preprocessing}/${params.runID}/QC/final_bam/fastqc" },
                    mode: params.publish_dir_mode, 
                    pattern: "*.{zip,html}"
                    ]
                }
            }
        }        
    }

////// Downsampling to 10 Million paired reads

if(!params.skip_downsampling) {

if (params.with_umi && params.skip_markduplicates) {
    process {
        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:DOWNSAMPLING_BAM2' {
            publishDir = [
                [
                path: { "${params.preprocessing}/${params.runID}/downsamp/${params.downsamp}M/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"   
                ], 
                [
                path: { "${params.preprocessing}/${params.runID}/downsamp/${params.downsamp}M/" },
                mode: params.publish_dir_mode,
                pattern: "*.bam"   
                ], 
                [
                path: { "${params.preprocessing}/${params.runID}/downsamp/${params.downsamp}M/" },
                mode: params.publish_dir_mode,
                pattern: "*.bai"   
                ]
            ]
        }
    }
}

if (!params.with_umi && !params.skip_markduplicates) {
    process {
        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:DOWNSAMPLING_BAM2' {
            publishDir = [
                [
                path: { "${params.preprocessing}/${params.runID}/downsamp/${params.downsamp}M/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"   
                ], 
                [
                path: { "${params.preprocessing}/${params.runID}/downsamp/${params.downsamp}M/" },
                mode: params.publish_dir_mode,
                pattern: "*.bam"   
                ], 
                [
                path: { "${params.preprocessing}/${params.runID}/downsamp/${params.downsamp}M/" },
                mode: params.publish_dir_mode,
                pattern: "*.bai"   
                ]
            ]
        }
    }
}
}

////////
// Quality control
////////

process {
    withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:DUMPSOFTWAREVERSIONS' {
            publishDir = [
                path: { "${params.preprocessing}/${params.runID}/QC" },
                mode: params.publish_dir_mode,
                pattern: "*_versions.yml"   
                ]
    }
}

if (!params.skip_picard_multiplemetrics) {
    process {
        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:PICARD_COLLECTMULTIPLEMETRICS' {
            publishDir = [
                [
                path: { "${params.preprocessing}/${params.runID}/QC/picard_multiple_metrics/pdf" },
                mode: params.publish_dir_mode,
                pattern: "*.pdf"   
                ],
                [
                path: { "${params.preprocessing}/${params.runID}/QC/picard_multiple_metrics/metrics" },
                mode: params.publish_dir_mode,
                pattern: "*_metrics"    
                ]
            ]
        }
    }
}

process {
    withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:SAMTOOLS_VIEW_COUNT' {
        publishDir = [
                path: { "${params.preprocessing}/${params.runID}/QC/final_bam" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"   
                ]
    }
}

if (!params.skip_methylation_qc) {

    process {
        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:SATURATION' {
            ext.windowsize = '300'
            publishDir = [
                [
                path: { "${params.preprocessing}/${params.runID}/QC/final_bam/methyl_stat" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"   
                ], 
                [
                path: { "${params.preprocessing}/${params.runID}/QC/final_bam/methyl_stat/methyl_saturation_per_sample" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"   
                ]
            ]
        }

        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:CPG_COVERAGE' {
            publishDir = [
                [
                path: { "${params.preprocessing}/${params.runID}/QC/final_bam/methyl_stat" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"   
                ],
                [
                path: { "${params.preprocessing}/${params.runID}/QC/final_bam/methyl_stat/methyl_coverage_per_sample" },
                mode: params.publish_dir_mode,
                pattern: "*.jpg"   
                ]
            ]
        }

    
        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:CPG_ENRICHMENT' {
            publishDir = [
                path: { "${params.preprocessing}/${params.runID}/QC/final_bam/methyl_stat" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"   
            ]
        }
    }
}


process {
    withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:FASTQC_SUMMARY' {
        publishDir = [
                path: { "${params.preprocessing}/${params.runID}/QC/final_bam" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"   
                ]
        }
    
    withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:QC_SUMMARY' {
        publishDir = [
                [
                path: { "${params.preprocessing}/${params.runID}/QC/final_bam" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"   
                ],
                [
                path: { "${params.preprocessing}/${params.runID}/QC/final_bam" },
                mode: params.publish_dir_mode,
                pattern: "Coverage_overview.{png,svg}"   
                ],
                [
                path: { "${params.preprocessing}/${params.runID}/QC/final_bam" },
                mode: params.publish_dir_mode,
                pattern: "{CpG_enrichment,Saturation_overview}.{png,svg}", 
                enabled: !params.skip_methylation_qc   
                ]
            ]
    }
}

if (!params.skip_multiqc_preprocess) {
    process {
        withName: 'WGS_MEDIP_PIPELINE:PREPROCESSING:MULTIQC' {
            publishDir = [
                [
                path: { "${params.preprocessing}/${params.runID}/QC/multiqc" },
                mode: params.publish_dir_mode,
                pattern: "*_plots"
                ],
                [
                path: { "${params.preprocessing}/${params.runID}/QC/multiqc" },
                mode: params.publish_dir_mode,
                pattern: "*_data"
                ],
                [
                path: { "${params.preprocessing}/${params.runID}/QC/multiqc" },
                mode: params.publish_dir_mode,
                pattern: "*multiqc_report.html"
                ]
            ]    
        }
    }
}